import { TokenType, IdTokenValidation, ValidationOptions, ManagedHttpResolver, CryptoOptions, IExpected, VerifiablePresentationTokenValidator, VerifiableCredentialTokenValidator, IdTokenTokenValidator, SiopTokenValidator, SelfIssuedTokenValidator, ValidatorBuilder } from '../../lib';
import { KeyStoreInMemory, CryptoFactoryNode, SubtleCryptoNode, JoseProtocol } from '@microsoft/crypto-sdk';
import ToolHelpers from './ToolHelpers';

describe('tools - test SIOP', () => {
  fit('should validate a SIOP', async () => {
    const siop = 'eyJhbGciOiJFUzI1NksiLCJraWQiOiJkaWQ6aW9uOkVpRDBCOVJGOWhjaWxoMVI4OEx1R3diTWxsSGRBa2xzV3FkemlxTVNHVjNEWnc_LWlvbi1pbml0aWFsLXN0YXRlPWV5SmtaV3gwWVY5b1lYTm9Jam9pUldsRVNHNXZhbVV6TjJ3MFZsbHllbnBZU0ZVeVNsTTVZM2RhT1ZaVGFUSkVSM1JpYjFscGJraEljMjR3WnlJc0luSmxZMjkyWlhKNVgydGxlU0k2ZXlKcmRIa2lPaUpGUXlJc0ltTnlkaUk2SW5ObFkzQXlOVFpyTVNJc0luZ2lPaUo2YjFWSlJqQnJPV0ZpVlVsT09VWmtSRWg1UlVSSWFHbG5iSEpLTTFCYVQyWXlNMTg0WTFwRmRXUk5JaXdpZVNJNklrRkJXblF0TlZsa2MwaDRUVk01TFU1bWMxWlBVbkp3Ym0xTGMwWllTa3BQYkhnM2QzRk5UMnRuWmpnaWZTd2ljbVZqYjNabGNubGZZMjl0YldsMGJXVnVkQ0k2SWtWcFFXa3pVa05yV2pKUWJEWmFXR3cwWHpZM1FuQmhUbFJXV1hjNFRURXpaMmRxVUZKVmJtYzBUa1k1YWxFaWZRLmV5SjFjR1JoZEdWZlkyOXRiV2wwYldWdWRDSTZJa1ZwUTBwZlVUVm1jRTl2WW5KbVRFMWhWakZoZWtOSVNFdHROSEJaYkdkUFFrbEtXbmxyTkd4c1FsWTJWM2NpTENKd1lYUmphR1Z6SWpwYmV5SmhZM1JwYjI0aU9pSnlaWEJzWVdObElpd2laRzlqZFcxbGJuUWlPbnNpY0hWaWJHbGpTMlY1Y3lJNlczc2lhV1FpT2lKeFVHdE5ibHBMVlZvMVFWOXphV2R1WHpFaUxDSjBlWEJsSWpvaVUyVmpjREkxTm1zeFZtVnlhV1pwWTJGMGFXOXVTMlY1TWpBeE9TSXNJbXAzYXlJNmV5SnJkSGtpT2lKRlF5SXNJbU55ZGlJNkluTmxZM0F5TlRack1TSXNJbmdpT2lJd2NsOVZjMUoyVmtoSFQzZExNalZRZVVSTFRXTkNZVGhpZVc1UlJ6UlBWMUE0YTI5b1FsZEJjV2t3SWl3aWVTSTZJbXhTZEdoaVpUTjZhVFJDUW1SaGJYTnVlREJ3VmtjemVYbEdja3N4Y1ZCVlkxTnJjMTlmZEZOV2VYTWlmU3dpZFhOaFoyVWlPbHNpYjNCeklpd2lZWFYwYUNJc0ltZGxibVZ5WVd3aVhYMWRmWDFkZlEjcVBrTW5aS1VaNUFfc2lnbl8xIn0.eyJpc3MiOiJodHRwczovL3NlbGYtaXNzdWVkLm1lIiwic3ViIjoiRjBoZDlFdGptOUE4eG55dVNEMEExcTdpUjdvVndXZVRxSTR5ZkgtVjRIZyIsImF1ZCI6Imh0dHBzOi8vcG9ydGFibGVpZGVudGl0eWNhcmRzLmF6dXJlLWFwaS5uZXQvdjEuMC81MzYyNzlmNi0xNWNjLTQ1ZjItYmUyZC02MWUzNTJiNTFlZWYvcG9ydGFibGVJZGVudGl0aWVzL2NhcmQvaXNzdWUiLCJkaWQiOiJkaWQ6aW9uOkVpRDBCOVJGOWhjaWxoMVI4OEx1R3diTWxsSGRBa2xzV3FkemlxTVNHVjNEWnc_LWlvbi1pbml0aWFsLXN0YXRlPWV5SmtaV3gwWVY5b1lYTm9Jam9pUldsRVNHNXZhbVV6TjJ3MFZsbHllbnBZU0ZVeVNsTTVZM2RhT1ZaVGFUSkVSM1JpYjFscGJraEljMjR3WnlJc0luSmxZMjkyWlhKNVgydGxlU0k2ZXlKcmRIa2lPaUpGUXlJc0ltTnlkaUk2SW5ObFkzQXlOVFpyTVNJc0luZ2lPaUo2YjFWSlJqQnJPV0ZpVlVsT09VWmtSRWg1UlVSSWFHbG5iSEpLTTFCYVQyWXlNMTg0WTFwRmRXUk5JaXdpZVNJNklrRkJXblF0TlZsa2MwaDRUVk01TFU1bWMxWlBVbkp3Ym0xTGMwWllTa3BQYkhnM2QzRk5UMnRuWmpnaWZTd2ljbVZqYjNabGNubGZZMjl0YldsMGJXVnVkQ0k2SWtWcFFXa3pVa05yV2pKUWJEWmFXR3cwWHpZM1FuQmhUbFJXV1hjNFRURXpaMmRxVUZKVmJtYzBUa1k1YWxFaWZRLmV5SjFjR1JoZEdWZlkyOXRiV2wwYldWdWRDSTZJa1ZwUTBwZlVUVm1jRTl2WW5KbVRFMWhWakZoZWtOSVNFdHROSEJaYkdkUFFrbEtXbmxyTkd4c1FsWTJWM2NpTENKd1lYUmphR1Z6SWpwYmV5SmhZM1JwYjI0aU9pSnlaWEJzWVdObElpd2laRzlqZFcxbGJuUWlPbnNpY0hWaWJHbGpTMlY1Y3lJNlczc2lhV1FpT2lKeFVHdE5ibHBMVlZvMVFWOXphV2R1WHpFaUxDSjBlWEJsSWpvaVUyVmpjREkxTm1zeFZtVnlhV1pwWTJGMGFXOXVTMlY1TWpBeE9TSXNJbXAzYXlJNmV5SnJkSGtpT2lKRlF5SXNJbU55ZGlJNkluTmxZM0F5TlRack1TSXNJbmdpT2lJd2NsOVZjMUoyVmtoSFQzZExNalZRZVVSTFRXTkNZVGhpZVc1UlJ6UlBWMUE0YTI5b1FsZEJjV2t3SWl3aWVTSTZJbXhTZEdoaVpUTjZhVFJDUW1SaGJYTnVlREJ3VmtjemVYbEdja3N4Y1ZCVlkxTnJjMTlmZEZOV2VYTWlmU3dpZFhOaFoyVWlPbHNpYjNCeklpd2lZWFYwYUNJc0ltZGxibVZ5WVd3aVhYMWRmWDFkZlEiLCJzdWJfandrIjp7Imt0eSI6IkVDIiwia2lkIjoiI3FQa01uWktVWjVBX3NpZ25fMSIsInVzZSI6InNpZyIsImtleV9vcHMiOlsidmVyaWZ5Il0sImFsZyI6IkVTMjU2SyIsImNydiI6IlAtMjU2SyIsIngiOiIwcl9Vc1J2VkhHT3dLMjVQeURLTWNCYThieW5RRzRPV1A4a29oQldBcWkwIiwieSI6ImxSdGhiZTN6aTRCQmRhbXNueDBwVkczeXlGcksxcVBVY1Nrc19fdFNWeXMifSwiaWF0IjoxNTg4MjQ5MDg4LCJleHAiOjE1ODgyODUwNTYsImNvbnRyYWN0IjoiaHR0cHM6Ly9wb3J0YWJsZWlkZW50aXR5Y2FyZHMuYXp1cmUtYXBpLm5ldC92MS4wLzUzNjI3OWY2LTE1Y2MtNDVmMi1iZTJkLTYxZTM1MmI1MWVlZi9wb3J0YWJsZUlkZW50aXRpZXMvY29udHJhY3RzL1dvb2Rncm92ZUlkIiwianRpIjoiYTBjOWEzYTItY2RkNy00MTQzLWE3M2YtNzY1MjdhM2IzNGZkIiwiYXR0ZXN0YXRpb25zIjp7InNlbGZJc3N1ZWQiOnsibWlkZGxlX25hbWUiOiJrampqIn0sImlkVG9rZW5zIjp7Imh0dHBzOi8vbG9naW4ubWljcm9zb2Z0b25saW5lLmNvbS93b29kZ3JvdmUubXMvLndlbGwta25vd24vb3BlbmlkLWNvbmZpZ3VyYXRpb24iOiJleUowZVhBaU9pSktWMVFpTENKaGJHY2lPaUpTVXpJMU5pSXNJbmcxZENJNklrTjBWSFZvVFVwdFJEVk5OMFJNWkhwRU1uWXllRE5SUzFOU1dTSXNJbXRwWkNJNklrTjBWSFZvVFVwdFJEVk5OMFJNWkhwRU1uWXllRE5SUzFOU1dTSjkuZXlKaGRXUWlPaUkwTUdKbE5HWmlOUzAzWmpOaExUUTNNR0l0WVdFek55MDJObVZrTkRNNE1qRmlaRGNpTENKcGMzTWlPaUpvZEhSd2N6b3ZMM04wY3k1M2FXNWtiM2R6TG01bGRDODFNell5TnpsbU5pMHhOV05qTFRRMVpqSXRZbVV5WkMwMk1XVXpOVEppTlRGbFpXWXZJaXdpYVdGMElqb3hOVGc0TWpRNE5UTTBMQ0p1WW1ZaU9qRTFPRGd5TkRnMU16UXNJbVY0Y0NJNk1UVTRPREkxTWpRek5Dd2lZV2x2SWpvaVFXTlJRVTh2T0ZCQlFVRkJkV0ZHWWtOaGVHbEVVM1I0T1VsRlZIWnZZMmx3VEZjeFIyOVBWV0ZoU1dKMVJHUlhNRXQyZFhsbmNIZE1iRXN5ZGxWcU5tNDJORzQ1VUhSUU4wZE9aVmxDWW5CRFRUbGpRMlJhUjFGQ1RXc3pZbXdyTVhaQ1F6QlBWbFZOT0RkMlduSTNMM0ZFTDJ4RFYxbDNZMGhxYWxKRlowWmlWRVZzVkRSak9UaE5TRFJaWm5GaVNqbFdReXN4ZFROVVpFcDFOMXAxTm5GUlFtTmFkRlZTZG1sdlR6SkhlVVEyUzBNMWR6aFpTbVp6TDFCeFIyUkNWM2xpZDNObmVsWTNibGRuZW1ST1pGTkxjakpHTjJKek9YaDZXQ3R2Wmt0TGF6VlVWVk4zZG5CdFIyaE1UV055V2xSSldXcHhhV2xvYTJaelkyTk1SbkJHY210WmMyeHBMME5KWXlJc0ltRnRjaUk2V3lKd2QyUWlMQ0p0Wm1FaVhTd2labUZ0YVd4NVgyNWhiV1VpT2lKTmFXdHZiR0ZxWlhkemEya2lMQ0puYVhabGJsOXVZVzFsSWpvaVFXNWtjbVZoY3lJc0ltbHdZV1JrY2lJNklqYzFMakUzTWk0eE5qTXVORFVpTENKdVlXMWxJam9pUVc1a2NtVmhjeUJOYVd0dmJHRnFaWGR6YTJraUxDSnViMjVqWlNJNklqRTBNakExTnpJd09UQWlMQ0p2YVdRaU9pSmtOalV4TmpjeU55MDBaRFpsTFRReE1URXRZakkxTkMxbE0yVmtPVE00WWpOaE56TWlMQ0p5YUNJNklqQXVRVk5uUVRsdWJHbFZPSGRXT0d0WExVeFhTR3BWY2xWbE56ZFdVSFpyUVRabWQzUkljV3BrYlRkVlQwTkhPV052UVVRd0xpSXNJbk4xWWlJNklqQnJhM2hDUmtwRGJtdHVkVEF3WDBORmNUbFNhbkI1VHpWbGVtNDVOME5MYzFndFFtUjBWV3cwTlc4aUxDSjBhV1FpT2lJMU16WXlOemxtTmkweE5XTmpMVFExWmpJdFltVXlaQzAyTVdVek5USmlOVEZsWldZaUxDSjFibWx4ZFdWZmJtRnRaU0k2SW1GdWJXbHJiMnhoUUhkdmIyUm5jbTkyWlM1dGN5SXNJblZ3YmlJNkltRnViV2xyYjJ4aFFIZHZiMlJuY205MlpTNXRjeUlzSW5WMGFTSTZJa0ZLT0RWa1ZFeFRiMVZsWDI1TVRtTmlSMFZMUVVFaUxDSjJaWElpT2lJeExqQWlmUS5FMTMyLWIyeE5SQ2lqR3JGWXhCZXd2OGY2ZzNYM0t5eWZodWJGY19hUlNrRVp2WG1qcVZxdHhFdTl5NkhOWDJMb0ktRl9CR3k5a3FhcFZ3SGdDcmM0a18xajZPVm9oRlQxYnd4UWc3ZG5ZcDVDUWFxWkw3enRkUEp3MnV1R2t5VVpuRjQxRjRDQVB4UDJXaUhaTDFhU1FJbFBBWmxGcGdWX0ZUWTE2TXM3a1FJWkloYTVfYlFwVVBhZ2NvVmx6Q0NTWmdrZ24zMUxpb2Z3cWRsUUtVMjJvTmc0dlR3LVVHV3J6M3FRcVNkSnl4QjhlcDVmczkwclc1TVBxWEpJSVRaeUxOQy1qZk1OQ2swOTExVUFFRHF1M2NiQkNDV0VqUWpYS1dNcHB1TnhzV01Ba1F5Q0FLbGZ3S1h0a0lDUkZvTWIya3pTcXlrZDdlNm9Kb2ZuTlJEbEEifX19.MEUCIQCLbIu0bIwyJ9IXrTC4dLBCLcfj_RftEReJMBJc4ExVqAIgGe8YnG3XPbZfOS_NBGG3DrHo1-Vn66dMdSv8kl9iLiA';
    
    const expected: IExpected[] = [
      { type: TokenType.selfIssued },
      { type: TokenType.idToken, issuers: [''], audience: '' },
      { type: TokenType.siop, issuers: ['https://self-issued.me'], audience: '' },
      { type: TokenType.verifiablePresentation, issuers: ['userDid'] , audience: '' },
      { type: TokenType.verifiableCredential, issuers: ['issuerDid'], subject: 'userDid', contracts: [] }
    ];
    const siopExpected = expected.filter((token: IExpected) => token.type === TokenType.siop)[0];
    const vpExpected = expected.filter((token: IExpected) => token.type === TokenType.verifiablePresentation)[0];
    const vcExpected = expected.filter((token: IExpected) => token.type === TokenType.verifiableCredential)[0];
    const idTokenExpected = expected.filter((token: IExpected) => token.type === TokenType.idToken)[0];
    const siExpected = expected.filter((token: IExpected) => token.type === TokenType.selfIssued)[0];
    
    // the map gets its key from the created request
    const map: any = {
      siop: vcExpected
    };
    map['NameOfVp'] =  vcExpected;

    const options = ToolHelpers.getOptions();
    const vpValidator = new VerifiablePresentationTokenValidator(options.validatorOptions, vpExpected);
    const vcValidator = new VerifiableCredentialTokenValidator(options.validatorOptions, map);
    const idTokenValidator = new IdTokenTokenValidator(options.validatorOptions, idTokenExpected);
    const siopValidator = new SiopTokenValidator(options.validatorOptions, siopExpected);
    const siValidator = new SelfIssuedTokenValidator(options.validatorOptions, siExpected);

    let validator = new ValidatorBuilder()
    .useValidators([vcValidator, vpValidator, idTokenValidator, siopValidator, siValidator])
    .build();

    const result = await validator.validate(siop);
    expect(result.result).toBeTruthy();
  });
});